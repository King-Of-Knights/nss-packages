--- a/nss_igs.c
+++ b/nss_igs.c
@@ -1,6 +1,6 @@
 /*
  **************************************************************************
- * Copyright (c) 2019, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2019-2020, The Linux Foundation. All rights reserved.
  * Permission to use, copy, modify, and/or distribute this software for
  * any purpose with or without fee is hereby granted, provided that the
  * above copyright notice and this permission notice appear in all copies.
@@ -17,6 +17,14 @@
 #include "nss_tx_rx_common.h"
 #include "nss_igs_stats.h"
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0))
+#ifdef CONFIG_NET_CLS_ACT
+#include <linux/tc_act/tc_nss_mirred.h>
+#endif
+#endif
+
+static struct module *nss_igs_module;
+
 /*
  * nss_igs_verify_if_num()
  *	Verify interface number passed to us.
@@ -51,12 +59,12 @@ static void nss_igs_handler(struct nss_c
 	 * Is this a valid request/response packet?
 	 */
 	if (ncm->type >= NSS_IGS_MSG_MAX) {
-		nss_warning("%p: received invalid message %d for IGS interface", nss_ctx, ncm->type);
+		nss_warning("%px: received invalid message %d for IGS interface", nss_ctx, ncm->type);
 		return;
 	}
 
 	if (nss_cmn_get_msg_len(ncm) > sizeof(struct nss_igs_msg)) {
-		nss_warning("%p: tx request for another interface: %d", nss_ctx, ncm->interface);
+		nss_warning("%px: tx request for another interface: %d", nss_ctx, ncm->interface);
 		return;
 	}
 
@@ -87,7 +95,7 @@ static void nss_igs_handler(struct nss_c
 	 * call igs callback
 	 */
 	if (!cb) {
-		nss_warning("%p: No callback for igs interface %d",
+		nss_warning("%px: No callback for igs interface %d",
 			    nss_ctx, ncm->interface);
 		return;
 	}
@@ -152,3 +160,40 @@ struct nss_ctx_instance *nss_igs_get_con
 	return (struct nss_ctx_instance *)&nss_top_main.nss[nss_top_main.igs_handler_id];
 }
 EXPORT_SYMBOL(nss_igs_get_context);
+
+#ifdef CONFIG_NET_CLS_ACT
+/*
+ * nss_igs_module_save()
+ *	Save the ingress shaping module reference.
+ */
+void nss_igs_module_save(struct tc_action_ops *act, struct module *module)
+{
+	nss_assert(act);
+	nss_assert(act->type == TCA_ACT_MIRRED_NSS);
+
+	nss_igs_module = module;
+}
+EXPORT_SYMBOL(nss_igs_module_save);
+#endif
+
+/*
+ * nss_igs_module_get()
+ *	Get the ingress shaping module reference.
+ */
+bool nss_igs_module_get()
+{
+	nss_assert(nss_igs_module);
+	return try_module_get(nss_igs_module);
+}
+EXPORT_SYMBOL(nss_igs_module_get);
+
+/*
+ * nss_igs_module_put()
+ *	Release the ingress shaping module reference.
+ */
+void nss_igs_module_put()
+{
+	nss_assert(nss_igs_module);
+	module_put(nss_igs_module);
+}
+EXPORT_SYMBOL(nss_igs_module_put);
--- a/exports/nss_igs.h
+++ b/exports/nss_igs.h
@@ -22,8 +22,14 @@
 #ifndef _NSS_IGS_H_
 #define _NSS_IGS_H_
 
+#ifndef DOXYGEN_SHOULD_SKIP_THIS
+#ifdef CONFIG_NET_CLS_ACT
+#include <net/act_api.h>
+#endif
+#endif
+
 /**
- * @addtogroup NSS ingress shaper subsystem
+ * @addtogroup nss_ingress_shaper_subsystem
  * @{
  */
 
@@ -163,6 +169,44 @@ extern void nss_igs_unregister_if(uint32
  */
 extern bool nss_igs_verify_if_num(uint32_t if_num);
 
+
+#ifdef CONFIG_NET_CLS_ACT
+/*
+ * nss_igs_module_save()
+ *	Save the ingress shaping module reference.
+ *
+ * @datatypes
+ * tc_action_ops \n
+ * module
+ *
+ * @param[in] act     Operation structure for ingress shaping action.
+ * @param[in] module  Module structure of ingress shaping module.
+ *
+ * @return
+ * None.
+ */
+extern void nss_igs_module_save(struct tc_action_ops *act, struct module *module);
+#endif
+
+/*
+ * nss_igs_module_get()
+ *	Get the ingress shaping module reference.
+ *
+ * @return
+ * False if not able to take the ingress shaping module reference, otherwise true.
+ *
+ */
+extern bool nss_igs_module_get(void);
+
+/*
+ * nss_igs_module_put()
+ *	Release the ingress shaping module reference.
+ *
+ * @return
+ * None.
+ */
+extern void nss_igs_module_put(void);
+
 /**
  * @}
  */
